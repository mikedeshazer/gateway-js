/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import Contract, { contractOptions } from "web3/eth/contract";
import { EventLog, Callback, EventEmitter } from "web3/types";
import { TransactionObject, BlockType } from "web3/eth/types";
import { ContractEvent } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class BCH_DAI_Reserve extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: contractOptions
  );
  clone(): BCH_DAI_Reserve;
  address: string;
  methods: {
    name(): TransactionObject<string>;

    approve(
      spender: string,
      value: number | string
    ): TransactionObject<boolean>;

    buy(
      _to: string,
      _from: string,
      _baseTokenAmount: number | string
    ): TransactionObject<BN>;

    recoverTokens(_token: string): TransactionObject<void>;

    totalSupply(): TransactionObject<BN>;

    addLiquidity(
      _liquidityProvider: string,
      _maxBaseToken: number | string,
      _tokenAmount: number | string,
      _deadline: number | string
    ): TransactionObject<BN>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;

    decimals(): TransactionObject<BN>;

    increaseAllowance(
      spender: string,
      addedValue: number | string
    ): TransactionObject<boolean>;

    calculateQuoteTokenValue(
      _liquidity: number | string
    ): TransactionObject<BN>;

    expectedBaseTokenAmount(
      _quoteTokenAmount: number | string
    ): TransactionObject<BN>;

    feeInBIPS(): TransactionObject<BN>;

    balanceOf(account: string): TransactionObject<BN>;

    renounceOwnership(): TransactionObject<void>;

    owner(): TransactionObject<string>;

    isOwner(): TransactionObject<boolean>;

    updateFee(_pendingFeeInBIPS: number | string): TransactionObject<void>;

    symbol(): TransactionObject<string>;

    removeLiquidity(
      _liquidity: number | string
    ): TransactionObject<{
      0: BN;
      1: BN;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string
    ): TransactionObject<boolean>;

    transfer(
      recipient: string,
      amount: number | string
    ): TransactionObject<boolean>;

    calculateSellRcvAmt(_sendAmt: number | string): TransactionObject<BN>;

    calculateBaseTokenValue(_liquidity: number | string): TransactionObject<BN>;

    pendingFeeInBIPS(): TransactionObject<BN>;

    feeChangeBlock(): TransactionObject<BN>;

    baseToken(): TransactionObject<string>;

    sell(
      _to: string,
      _from: string,
      _tokenAmount: number | string
    ): TransactionObject<BN>;

    calculateBuyRcvAmt(_sendAmt: number | string): TransactionObject<BN>;

    allowance(owner: string, spender: string): TransactionObject<BN>;

    calculateExpectedLiquidity(
      _tokenAmount: number | string
    ): TransactionObject<BN>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    token(): TransactionObject<string>;
  };
  events: {
    LogAddLiquidity: ContractEvent<{
      _liquidityProvider: string;
      _tokenAmount: BN;
      _baseTokenAmount: BN;
      0: string;
      1: BN;
      2: BN;
    }>;
    LogDebug: ContractEvent<BN>;
    LogFeesChanged: ContractEvent<{
      _previousFeeInBIPS: BN;
      _newFeeInBIPS: BN;
      0: BN;
      1: BN;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      value: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    Approval: ContractEvent<{
      owner: string;
      spender: string;
      value: BN;
      0: string;
      1: string;
      2: BN;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
